{"version":3,"file":"index.es.js","sources":["../src/index.js"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nfunction noop() {}\n\nconst stopWatching = watchId => {\n  navigator.nfc\n    .cancelWatch(watchId)\n    .then(() => {\n      console.log('Stopped watching for a nfc tag.')\n    })\n    .catch(error => {\n      if (error.name === 'NotFoundError') {\n        // we're ignoring NotFoundError, assuming it happened because the\n        // watch was already cancelled after a write\n        return\n      }\n      throw error\n    })\n}\n\nfunction nfcAvailable() {\n  if (navigator.nfc) {\n    return true\n  }\n  return false\n}\n\nfunction read(setResponse = noop, timeout) {\n  if (!nfcAvailable()) {\n    setResponse(prevState => ({\n      ...prevState,\n      status: 'UNAVAILABLE',\n    }))\n    return\n  }\n  setResponse(prevState => ({\n    ...prevState,\n    status: 'INITIALIZING',\n  }))\n  navigator.nfc\n    .watch(message => {\n      setResponse(prevState => ({\n        ...prevState,\n        data: message.records[0].data,\n      }))\n    })\n    .then(watchId => {\n      const timeoutId = setTimeout(() => {\n        stopWatching(watchId)\n        setResponse(prevState => ({\n          ...prevState,\n          status: 'TIMEOUT',\n        }))\n      }, timeout * 1000)\n      const intervalId = setInterval(() => {\n        setResponse(prevState => ({\n          ...prevState,\n          time: prevState.time - 1,\n        }))\n      }, 1000)\n      setResponse(prevState => ({\n        ...prevState,\n        status: 'READY',\n        time: timeout,\n        retry: () => {\n          clearTimeout(timeoutId)\n          clearInterval(intervalId)\n          stopWatching(watchId)\n          read(setResponse, timeout)\n        },\n      }))\n    })\n}\n\nfunction useNfcRead(timeout = 15) {\n  const [response, setResponse] = useState({ retry: noop })\n  useEffect(() => {\n    read(setResponse, timeout)\n    return () => stopWatching()\n  }, [])\n  return response\n}\n\nexport { useNfcRead }\n"],"names":["noop","stopWatching","nfc","cancelWatch","watchId","then","log","catch","error","name","nfcAvailable","navigator","read","setResponse","timeout","prevState","watch","message","records","data","timeoutId","setTimeout","intervalId","setInterval","time","useNfcRead","useState","retry","response"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,IAAT,GAAgB;;AAEhB,IAAMC,eAAe,SAAfA,YAAe,UAAW;YACpBC,GAAV,CACGC,WADH,CACeC,OADf,EAEGC,IAFH,CAEQ,YAAM;YACFC,GAAR,CAAY,iCAAZ;GAHJ,EAKGC,KALH,CAKS,iBAAS;QACVC,MAAMC,IAAN,KAAe,eAAnB,EAAoC;;;;;UAK9BD,KAAN;GAXJ;CADF;;AAgBA,SAASE,YAAT,GAAwB;MAClBC,UAAUT,GAAd,EAAmB;WACV,IAAP;;SAEK,KAAP;;;AAGF,SAASU,IAAT,GAA2C;MAA7BC,WAA6B,uEAAfb,IAAe;MAATc,OAAS;;MACrC,CAACJ,cAAL,EAAqB;gBACP;0BACPK,SADO;gBAEF;;KAFV;;;cAMU;wBACPA,SADO;cAEF;;GAFV;YAIUb,GAAV,CACGc,KADH,CACS,mBAAW;gBACJ;0BACPD,SADO;cAEJE,QAAQC,OAAR,CAAgB,CAAhB,EAAmBC;;KAF3B;GAFJ,EAOGd,IAPH,CAOQ,mBAAW;QACTe,YAAYC,WAAW,YAAM;mBACpBjB,OAAb;kBACY;4BACPW,SADO;kBAEF;;OAFV;KAFgB,EAMfD,UAAU,IANK,CAAlB;QAOMQ,aAAaC,YAAY,YAAM;kBACvB;4BACPR,SADO;gBAEJA,UAAUS,IAAV,GAAiB;;OAFzB;KADiB,EAKhB,IALgB,CAAnB;gBAMY;0BACPT,SADO;gBAEF,OAFE;cAGJD,OAHI;eAIH,iBAAM;uBACEM,SAAb;wBACcE,UAAd;uBACalB,OAAb;eACKS,WAAL,EAAkBC,OAAlB;;;KARJ;GArBJ;;;AAmCF,SAASW,UAAT,GAAkC;MAAdX,OAAc,uEAAJ,EAAI;;kBACAY,SAAS,EAAEC,OAAO3B,IAAT,EAAT,CADA;;MACzB4B,QADyB;MACff,WADe;;YAEtB,YAAM;SACTA,WAAL,EAAkBC,OAAlB;WACO;aAAMb,cAAN;KAAP;GAFF,EAGG,EAHH;SAIO2B,QAAP;;;;;"}